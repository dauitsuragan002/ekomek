import logging

from aiogram import types
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import *
from modules.commands import *
from modules.functions import *
from modules.lang.translater import *

@dp.callback_query(lambda query: query.data in ["info_cmd","help_cmd","more_cmd"])
async def process_callback_kb1btn1(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    data = callback_query.data
    message = callback_query.message
    builder = InlineKeyboardBuilder()
    text = '–°”ô–ª–µ–º, –±—ñ—Ä “õ–∞—Ç–µ–ª—ñ–∫ –∫–µ—Ç—Ç—ñ( “ö–∞–∑—ñ—Ä –∂”©–Ω–¥–µ–π–º—ñ–Ω!'
    builder.row(InlineKeyboardButton(text='¬´ –ê—Ä—Ç“õ–∞', callback_data='cmd'))
    if data == "help_cmd":
        text=handler_texts('help_handler')
    elif data == "info_cmd":
        text=handler_texts('info_handler')
    elif data == "more_cmd":
        text=handler_texts('more_handler')
    await bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id, text=text, reply_markup=builder.as_markup())

@dp.callback_query(lambda query: query.data in ["menu", "lang_cmd", "close_menu", 'cmd'])
async def process_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    data = callback_query.data
    builder = InlineKeyboardBuilder()
    
    message = callback_query.message
    if data == "menu":
        buttons = [
            [InlineKeyboardButton(text='üßë‚Äçüíª –ö–æ–º–∞–Ω–¥–∞–ª–∞—Ä', callback_data='cmd')],
            [InlineKeyboardButton(text='üîº –ú”ô–∑—ñ—Ä–¥—ñ –∂–∞–±—É', callback_data='close_menu')]
            ]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        text = "–°”ô–ª–µ–º! –ú–µ–Ω KazLLM —Ç—ñ–ª–¥—ñ–∫ –º–æ–¥–µ–ª—ñ–Ω—ñ“£ –∫”©–º–µ–≥—ñ–º–µ–Ω –∂“±–º—ã—Å –∂–∞—Å–∞–π–º—ã–Ω.\n\n–ú–∞“ì–∞–Ω –æ—Ä–Ω–∞—Ç—ã–ª“ì–∞–Ω –Ω–µ–≥—ñ–∑–≥—ñ –∫–æ–º–∞–Ω–¥–∞–ª–∞—Ä –æ—Å—ã –±–µ–ª–≥—ñ '/' –∞—Ä“õ—ã–ª—ã –Ω–µ–º–µ—Å–µ \"–ú–µ–Ω—é\" –±–∞—Ç—ã—Ä–º–∞—Å—ã –∞—Ä“õ—ã–ª—ã –æ—Ä—ã–Ω–¥—ã–ª–∞–¥—ã." + "\n\n–¢”©–º–µ–Ω–¥–µ –±–æ—Ç—Ç—ã“£ –º”ô–∑—ñ—Ä—ñ –∫”©—Ä—Å–µ—Ç—ñ–ª–≥–µ–Ωüëá"
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id, 
            message_id=callback_query.message.message_id,  
            text=text,
            reply_markup=keyboard,
            parse_mode='Markdown')
    elif data == "close_menu":
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text='üîΩ –ú”ô–∑—ñ—Ä', callback_data='menu'))
        text='–î–∏—Å–∫–ª–µ–π–º–µ—Ä: –±–æ—Ç –æ“õ—É-—Ç–∞–Ω—ã—Å—É “Ø—à—ñ–Ω –∂–∞—Å–∞–ª—ã–Ω“ì–∞–Ω.\n\n –ú–µ–Ω KazLLM —Ç—ñ–ª–¥—ñ–∫ –º–æ–¥–µ–ª—ñ–Ω—ñ“£ –∫”©–º–µ–≥—ñ–º–µ–Ω –∂“±–º—ã—Å –∂–∞—Å–∞–π–º—ã–Ω'
        await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text=text, reply_markup=builder.as_markup())
    elif data == "lang_cmd":
        text = handler_texts('lang_hanlder')
        change_user_languages = config.user_languages.get(user_id, '')
        # print("call change_user_languages :",change_user_languages )
        if change_user_languages:
            language_code, user_language = change_user_languages
            user_id = message.from_user.id

            builder = InlineKeyboardBuilder()
            check_mark = "‚úÖ"
            if not config.first_time_users.get(user_id, False):
                builder.row(InlineKeyboardButton(text=f"“ö–∞–∑–∞“õ —Ç—ñ–ª—ñ {check_mark}", callback_data="kk-KZ"),),
                builder.row(InlineKeyboardButton(text=f"–†—É—Å—Å–∫–∏–π {check_mark if change_user_languages == 'ru-RU' else ''}", callback_data="ru-RU"),),
                builder.row(InlineKeyboardButton(text=f"English {check_mark if change_user_languages == 'en-US' else ''}", callback_data="en-US")),
                builder.row (InlineKeyboardButton(text='¬´ –ê—Ä—Ç“õ–∞', callback_data='menu'),),
                config.first_time_users[user_id] = True
            else:
                builder.row(InlineKeyboardButton(text=f"“ö–∞–∑–∞“õ —Ç—ñ–ª—ñ {check_mark if language_code == 'kk-KZ' else ''}", callback_data="kk-KZ"),),
                builder.row(InlineKeyboardButton(text=f"–†—É—Å—Å–∫–∏–π {check_mark if language_code == 'ru-RU' else ''}", callback_data="ru-RU"),),
                builder.row(InlineKeyboardButton(text=f"English {check_mark if language_code == 'en-US' else ''}", callback_data="en-US"))
                builder.row (InlineKeyboardButton(text='¬´ –ê—Ä—Ç“õ–∞', callback_data='menu'),),
            await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text=text, reply_markup=builder.as_markup())
        else:
            keyboard = get_keyboard_markup_lang(config.user_languages.get(user_id, ""))
            await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text=text, reply_markup=keyboard)
    elif data == "cmd":
        builder = InlineKeyboardBuilder()
        text = "–ë–æ—Ç—Ç–∞ –æ—Ä–Ω–∞–ª–∞—Å“õ–∞–Ω –∫–æ–º–∞–Ω–¥–∞–ª–∞—Ä —Ç—ñ–∑—ñ–º—ñ üëá"
        builder.row (
            InlineKeyboardButton(text=f"‚ûï –ö”©–º–µ–∫", callback_data="help_cmd"),)
        # builder.row(InlineKeyboardButton(text='üó£ –î–µ—Ç–µ–∫—Ç–æ—Ä - —Ç—ñ–ª—ñ', callback_data='lang_cmd'))
        builder.row(InlineKeyboardButton(text=f"‚ÑπÔ∏è –ê“õ–ø–∞—Ä–∞—Ç", callback_data="info_cmd"),)
        builder.row(InlineKeyboardButton(text=f"–ë–∞—Å“õ–∞", callback_data="more_cmd"),)
        builder.row(InlineKeyboardButton(text='¬´ –ú”ô–∑—ñ—Ä', callback_data='menu'))
        await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text=text, reply_markup=builder.as_markup())

@dp.callback_query(lambda query: query.data in ["kk-KZ", "ru-RU", "en-US"])
async def handle_language_callback(callback_query: types.CallbackQuery):
    
    callback_data = callback_query.data

    check_mark = "‚úÖ"

    language_code = "kk-KZ"
    user_language = "“ö–∞–∑–∞“õ —Ç—ñ–ª—ñ"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞
    if callback_data == "kk-KZ":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –∫–∞–∑–∞—Ö—Å–∫–∏–π
        await callback_query.answer(f"{check_mark} “ö–∞–∑–∞“õ —Ç—ñ–ª—ñ –æ—Ä–Ω–∞—Ç—ã–ª–¥—ã.")
        language_code = "kk-KZ"
        user_language = "“ö–∞–∑–∞“õ —Ç—ñ–ª—ñ"

    elif callback_data == "ru-RU":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ —Ä—É—Å—Å–∫–∏–π
        await callback_query.answer(f"{check_mark} –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π.")
        language_code = "ru-RU"
        user_language = "–†—É—Å—Å–∫–∏–π"

    elif callback_data == "en-US":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        await callback_query.answer(f"{check_mark} The language has been set to English.")
        language_code = "en-US"
        user_language = "English"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª–æ–≤–∞—Ä–µ
    user_id = callback_query.from_user.id
    save_language = (language_code, user_language)
    config.user_languages[user_id] = save_language
    config.first_time_users[user_id] = True

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≥–∞–ª–æ—á–∫–∏
    keyboard = get_keyboard_markup_lang(config.user_languages.get(user_id, ""))
    await callback_query.message.edit_text(
        f"{callback_query.message.text}",
        reply_markup=keyboard,
    )